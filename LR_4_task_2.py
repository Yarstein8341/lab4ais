{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP7y1EdyI3NB5uc9JyHN2WW"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":545},"id":"WYSu-nE0Hvtd","executionInfo":{"status":"ok","timestamp":1734884185120,"user_tz":-120,"elapsed":395,"user":{"displayName":"Ярослав Білотіл","userId":"06797585363548962278"}},"outputId":"8d1b7711-10bc-4a82-85da-d0e380a0eba9"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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\n"},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Linear regressor performance:\n","Mean absolute error = 3.59\n","Mean squared error = 17.39\n","Median absolute error = 3.39\n","Explain variance score = 0.02\n","R2 score = -0.16\n","\n","New mean absolute error = 3.59\n"]}],"source":["import pickle\n","import numpy as np\n","from sklearn import linear_model\n","import sklearn.metrics as sm\n","import matplotlib.pyplot as plt\n","\n","# Вхідний файл, який містить дані\n","input_file = 'data_regr_3.txt'\n","\n","# Завантаження даних\n","data = np.loadtxt(input_file, delimiter=',')\n","X, y = data[:, :-1], data[:, -1]\n","\n","# Розбивка даних на навчальний та тестовий набори\n","num_training = int(0.8 * len(X))\n","num_test = len(X) - num_training\n","\n","# Тренувальні дані\n","X_train, y_train = X[:num_training], y[:num_training]\n","\n","# Тестові дані\n","X_test, y_test = X[num_training:], y[num_training:]\n","\n","# Створення об'єкта лінійного регресора\n","regressor = linear_model.LinearRegression()\n","regressor.fit(X_train, y_train)\n","\n","# Прогнозування результату\n","y_test_pred = regressor.predict(X_test)\n","\n","# Побудова графіка\n","plt.scatter(X_test, y_test, color='green')\n","plt.plot(X_test, y_test_pred, color='black', linewidth=4)\n","plt.xticks(())\n","plt.yticks(())\n","plt.show()\n","\n","# Оцінка моделі\n","print(\"Linear regressor performance:\")\n","print(\"Mean absolute error =\", round(sm.mean_absolute_error(y_test, y_test_pred), 2))\n","print(\"Mean squared error =\", round(sm.mean_squared_error(y_test, y_test_pred), 2))\n","print(\"Median absolute error =\", round(sm.median_absolute_error(y_test, y_test_pred), 2))\n","print(\"Explain variance score =\", round(sm.explained_variance_score(y_test, y_test_pred), 2))\n","print(\"R2 score =\", round(sm.r2_score(y_test, y_test_pred), 2))\n","\n","# Файл для збереження моделі\n","output_model_file = 'model.pkl'\n","\n","# Збереження моделі\n","with open(output_model_file, 'wb') as f:\n","    pickle.dump(regressor, f)\n","\n","# Завантаження моделі\n","with open(output_model_file, 'rb') as f:\n","    regressor_model = pickle.load(f)\n","\n","# Використання завантаженої моделі для прогнозування\n","y_test_pred_new = regressor_model.predict(X_test)\n","\n","# Виведення нових результатів\n","print(\"\\nNew mean absolute error =\", round(sm.mean_absolute_error(y_test, y_test_pred_new), 2))\n"]}]}